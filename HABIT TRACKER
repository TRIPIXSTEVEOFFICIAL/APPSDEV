import tkinter as tk
import customtkinter as ctk
import json
import os
import time
import threading

ctk.set_appearance_mode("System")
ctk.set_default_color_theme("blue")

current_user = None

def show_login():
    def login():
        username = user_entry.get()
        password = pass_entry.get()
        if os.path.exists(f"{username}.json"):
            with open(f"{username}.json", "r") as f:
                data = json.load(f)
                if data["password"] == password:
                    global current_user
                    current_user = username
                    login_win.after(100, lambda: [login_win.destroy(), show_tracker()])
                else:
                    status_label.configure(text="Wrong password")
        else:
            status_label.configure(text="User does not exist")

    def register():
        username = user_entry.get()
        password = pass_entry.get()
        if not os.path.exists(f"{username}.json"):
            with open(f"{username}.json", "w") as f:
                json.dump({"password": password, "habits": {}, "history": []}, f)
            status_label.configure(text="Registered. You can login.")
        else:
            status_label.configure(text="User already exists")

    login_win = ctk.CTk()
    login_win.geometry("300x300")
    login_win.title("Login/Register")

    ctk.CTkLabel(login_win, text="Username:").pack(pady=5)
    user_entry = ctk.CTkEntry(login_win)
    user_entry.pack(pady=5)

    ctk.CTkLabel(login_win, text="Password:").pack(pady=5)
    pass_entry = ctk.CTkEntry(login_win, show="*")
    pass_entry.pack(pady=5)

    ctk.CTkButton(login_win, text="Login", command=login).pack(pady=5)
    ctk.CTkButton(login_win, text="Register", command=register).pack(pady=5)
    status_label = ctk.CTkLabel(login_win, text="")
    status_label.pack(pady=5)

    login_win.mainloop()

def show_tracker():
    app = ctk.CTk()
    app.geometry("600x600")
    app.title("Habit Tracker")

    ctk.CTkLabel(app, text=f"Welcome, {current_user}", font=("Arial", 20)).pack(pady=10)

    user_file = f"{current_user}_data.json"
    if not os.path.exists(user_file):
        with open(user_file, "w") as f:
            json.dump({"habits": {}, "history": []}, f)

    with open(user_file, "r") as f:
        data = json.load(f)
        habit_data = data.get("habits", {})
        habit_history = data.get("history", [])

    def save_habits():
        with open(user_file, "w") as f:
            json.dump({"habits": habit_data, "history": habit_history}, f)

    def draw_habits():
        for widget in habit_frame.winfo_children():
            widget.destroy()

        for name in habit_data:
            frame = ctk.CTkFrame(habit_frame)
            frame.pack(pady=5, fill="x")

            chk_var = tk.BooleanVar(value=habit_data[name]["checked"])
            chk = ctk.CTkCheckBox(frame, text=name, variable=chk_var)
            chk.pack(side="left", padx=5)

            prog = ctk.CTkProgressBar(frame, width=120)
            prog.set(habit_data[name]["progress"] / 100)
            prog.pack(side="left", padx=5)

            def mark_done(n=name):
                habit_data[n]["progress"] = 100
                habit_data[n]["checked"] = True
                habit_history.append({"habit": n, "status": "Done", "time": time.strftime("%Y-%m-%d %H:%M:%S")})
                save_habits()
                draw_habits()

            done_btn = ctk.CTkButton(frame, text="Done", width=40, command=mark_done)
            done_btn.pack(side="left", padx=5)

            del_btn = ctk.CTkButton(frame, text="Delete", width=50, command=lambda n=name: delete_habit(n))
            del_btn.pack(side="right", padx=5)

    def add_habit():
        name = entry.get()
        if name and name not in habit_data:
            habit_data[name] = {"checked": False, "progress": 0}
            save_habits()
            draw_habits()
            entry.delete(0, "end")

    def delete_habit(name):
        if name in habit_data:
            del habit_data[name]
            save_habits()
            draw_habits()

    def show_history():
        top = ctk.CTkToplevel(app)
        top.title("Habit History")
        top.geometry("400x300")
        ctk.CTkLabel(top, text="Completed Habit History", font=("Arial", 16)).pack(pady=10)

        hist_box = ctk.CTkTextbox(top, width=380, height=220)
        hist_box.pack(pady=10)

        if not habit_history:
            hist_box.insert("end", "No history yet.")
        else:
            for record in habit_history:
                hist_box.insert("end", f"{record['time']} - {record['habit']} marked as {record['status']}\n")

    def logout():
        app.destroy()
        show_login()

    ctk.CTkLabel(app, text="New Habit:").pack()
    entry = ctk.CTkEntry(app)
    entry.pack(pady=5)
    ctk.CTkButton(app, text="Add Habit", command=add_habit).pack(pady=5)

    habit_selector = ctk.CTkComboBox(app, values=list(habit_data.keys()) or ["None"])
    habit_selector.pack(pady=5)

    timer_label = ctk.CTkLabel(app, text="Timer: 00:00:00")
    timer_label.pack()

    timer_h = ctk.CTkEntry(app, width=60, placeholder_text="HH")
    timer_h.pack(side="left", padx=2, pady=5)
    timer_m = ctk.CTkEntry(app, width=60, placeholder_text="MM")
    timer_m.pack(side="left", padx=2, pady=5)
    timer_s = ctk.CTkEntry(app, width=60, placeholder_text="SS")
    timer_s.pack(side="left", padx=2, pady=5)

    timer_running = [False]
    pause_event = threading.Event()
    pause_event.set()

    def run_timer():
        habit_name = habit_selector.get()
        if habit_name not in habit_data:
            timer_label.configure(text="Invalid habit")
            return
        try:
            h = int(timer_h.get()) if timer_h.get() else 0
            m = int(timer_m.get()) if timer_m.get() else 0
            s = int(timer_s.get()) if timer_s.get() else 0
            total_sec = h * 3600 + m * 60 + s
        except:
            timer_label.configure(text="Invalid time")
            return

        def countdown():
            nonlocal total_sec
            timer_running[0] = True
            while total_sec > 0 and timer_running[0]:
                pause_event.wait()
                mins, secs = divmod(total_sec, 60)
                hrs, mins = divmod(mins, 60)
                timer_label.configure(text=f"Timer: {hrs:02}:{mins:02}:{secs:02}")
                time.sleep(1)
                total_sec -= 1

            if timer_running[0] and total_sec == 0:
                timer_label.configure(text="Done!")
                habit_data[habit_name]["progress"] = min(100, habit_data[habit_name]["progress"] + 10)
                save_habits()
                draw_habits()

        threading.Thread(target=countdown).start()

    def toggle_pause_resume():
        if pause_event.is_set():
            pause_event.clear()
            pause_btn.configure(text="Resume")
        else:
            pause_event.set()
            pause_btn.configure(text="Pause")

    ctk.CTkButton(app, text="Start Timer", command=run_timer).pack(pady=5)
    pause_btn = ctk.CTkButton(app, text="Pause", command=toggle_pause_resume)
    pause_btn.pack(pady=5)

    ctk.CTkButton(app, text="View History", command=show_history).pack(pady=5)
    ctk.CTkButton(app, text="Logout", command=logout).pack(pady=5)

    habit_frame = ctk.CTkScrollableFrame(app, height=200)
    habit_frame.pack(pady=10, fill="both", expand=True)

    draw_habits()
    app.mainloop()

show_login()
